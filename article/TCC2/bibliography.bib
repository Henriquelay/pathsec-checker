@INPROCEEDINGS{polka,
  author={Dominicini, Cristina and Mafioletti, Diego and Locateli, Ana C. and Villaca, Rodolfo and Martinello, Magnos and Ribeiro, Moisés and Gorodnik, Alexander},
  booktitle={2020 6th IEEE Conference on Network Softwarization (NetSoft)}, 
  title={PolKA: Polynomial Key-based Architecture for Source Routing in Network Fabrics}, 
  year={2020},
  volume={},
  number={},
  pages={326-334},
  keywords={Routing;Fabrics;Hardware;Optical switches;Computer architecture;Prototypes;source routing;network fabrics;residue number system;software defined networks;Chinese remainder theorem},
  doi={10.1109/NetSoft48620.2020.9165501}}


@INPROCEEDINGS{polkap4,
  author={Dominicini, Cristina and Guimarães, Rafael and Mafioletti, Diego and Martinello, Magnos and Ribeiro, Moises R. N. and Villaça, Rodolfo and Loui, Frédéric and Ortiz, Jordi and Slyne, Frank and Ruffini, Marco and Kenny, Eoin},
  booktitle={2021 International Conference on Optical Network Design and Modeling (ONDM)}, 
  title={Deploying PolKA Source Routing in P4 Switches : (Invited Paper)}, 
  year={2021},
  volume={},
  number={},
  pages={1-3},
  keywords={Optical switches;Architecture;Buildings;Production;Traffic control;Optical fiber networks;Routing},
  doi={10.23919/ONDM51796.2021.9492363}}


@ARTICLE{potpolka,
  author={Borges, Everson Scherrer and Martinello, Magnos and Bonella, Vitor B. and dos Santos, Abraão J. and Gomes, Roberta L. and Dominicini, Cristina K. and Guimarães, Rafael Silva and Menegueti, Gabriel T. and Barcellos, Marinho and Ruffini, Marco},
  journal={IEEE Transactions on Network and Service Management}, 
  title={PoT-PolKA: Let the Edge Control the Proof-of-Transit in Path-Aware Networks}, 
  year={2024},
  volume={21},
  number={4},
  pages={3681-3691},
  keywords={Routing;Cryptography;Proposals;Polynomials;Protection;Metadata;Switches;Path-aware;path verification;proof-of-transit;IOAM;in-networking programming},
  doi={10.1109/TNSM.2024.3389457}}


@INPROCEEDINGS{pathsec,
  author={Martinello, Magnos and Gomes, Roberta Lima and Borges, Everson S. and Layber, Henrique Coutinho and Bonella, Vitor B. and Dominicini, Cristina K. and Guimarães, Rafael and Ribeiro, Moisés and Barcellos, Marinho},
  booktitle={2024 IEEE Conference on Network Function Virtualization and Software Defined Networks (NFV-SDN)}, 
  title={PathSec: Path-Aware Secure Routing with Native Path Verification and Auditability}, 
  year={2024},
  volume={},
  number={},
  pages={1-7},
  keywords={Multiprotocol label switching;Prototypes;Programming;Routing;Regulation;Hardware;Blockchains;Network function virtualization;Security;Software defined networking;Path Aware;Network security;Path Verification;Proof-of-transit;In-networking Programming},
  doi={10.1109/NFV-SDN61811.2024.10807493}}


@article{p4,
  title = {P4: programming protocol-independent packet processors},
  author = {Pat Bosshart and Dan Daly and Glen Gibb and Martin Izzard and Nick McKeown and Jennifer Rexford and Cole Schlesinger and Dan Talayco and Amin Vahdat and George Varghese and David Walker},
  year = {2014},
  month = {July},
  pages = {87--95},
  doi = {10.1145/2656877.2656890},
  url = {https://doi.org/10.1145/2656877.2656890},
  journal = {SIGCOMM Comput. Commun. Rev.},
  volume = {44},
  number = {3},
  abstract = {P4 is a high-level language for programming protocol-independent packet processors. P4 works in conjunction with SDN control protocols like OpenFlow. In its current form, OpenFlow explicitly specifies protocol headers on which it operates. This set has grown from 12 to 41 fields in a few years, increasing the complexity of the specification while still not providing the flexibility to add new headers. In this paper we propose P4 as a strawman proposal for how OpenFlow should evolve in the future. We have three goals: (1) Reconfigurability in the field: Programmers should be able to change the way switches process packets once they are deployed. (2) Protocol independence: Switches should not be tied to any specific network protocols. (3) Target independence: Programmers should be able to describe packet-processing functionality independently of the specifics of the underlying hardware. As an example, we describe how to use P4 to configure a switch to add a new hierarchical label.}
}

@INPROCEEDINGS{mininet-wifi,
  author={Fontes, Ramon R. and Afzal, Samira and Brito, Samuel H. B. and Santos, Mateus A. S. and Rothenberg, Christian Esteve},
  booktitle={2015 11th International Conference on Network and Service Management (CNSM)}, 
  title={Mininet-WiFi: Emulating software-defined wireless networks}, 
  year={2015},
  volume={},
  number={},
  pages={384-389},
  keywords={Wireless networks;IEEE 802.11 Standard;Topology;Emulation;Linux;Protocols;Wireless networks;Emulation;SDN;OpenFlow},
  doi={10.1109/CNSM.2015.7367387}
}


@inproceedings{mininet,
author = {Lantz, Bob and Heller, Brandon and McKeown, Nick},
title = {A network in a laptop: rapid prototyping for software-defined networks},
year = {2010},
isbn = {9781450304092},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1868447.1868466},
doi = {10.1145/1868447.1868466},
abstract = {Mininet is a system for rapidly prototyping large networks on the constrained resources of a single laptop. The lightweight approach of using OS-level virtualization features, including processes and network namespaces, allows it to scale to hundreds of nodes. Experiences with our initial implementation suggest that the ability to run, poke, and debug in real time represents a qualitative change in workflow. We share supporting case studies culled from over 100 users, at 18 institutions, who have developed Software-Defined Networks (SDN). Ultimately, we think the greatest value of Mininet will be supporting collaborative network research, by enabling self-contained SDN prototypes which anyone with a PC can download, run, evaluate, explore, tweak, and build upon.},
booktitle = {Proceedings of the 9th ACM SIGCOMM Workshop on Hot Topics in Networks},
articleno = {19},
numpages = {6},
keywords = {virtualization, software defined networking, rapid prototyping, open-flow, emulation},
location = {Monterey, California},
series = {Hotnets-IX}
}

@misc{bmv2,
  title = {Behavioral Model},
  howpublished = "\url{https://github.com/p4lang/behavioral-model}",
  url = {https://github.com/p4lang/behavioral-model},
  note = {Accessed: 2025-03-15},
  year = {2025},
  author = {P4 Language Consortium}
}

@misc{scapy,
  title = {Scapy},
  author = {Biondi Philippe secdev},
  year = {2003},
  howpublished = "\url{https://scapy.net/}",
  url = {https://scapy.net/},
  note = {Accessed: 2024-09-26}
}

@misc{wireshark,
  title = {Wireshark},
  author = {Wireshark Foundation},
  year = {2006},
  url = {https://www.wireshark.org/},
  note = {Accessed: 2024-09-26}
}

@misc{siphash,
  author = {Jean-Philippe Aumasson and Daniel J.  Bernstein},
  title = {{SipHash}: a fast short-input {PRF}},
  howpublished = {Cryptology {ePrint} Archive, Paper 2012/351},
  year = {2012},
  url = {https://eprint.iacr.org/2012/351}
}


@misc{reversingCRC,
  title = {Reversing crc–theory and practice},
  author = {Martin Stigge and Henryk Plötz and Wolf Müller and Jens-Peter Redlich},
  year = {2006}
}


@inproceedings{PINT2020,
author = {Ben Basat, Ran and Ramanathan, Sivaramakrishnan and Li, Yuliang and Antichi, Gianni and Yu, Minian and Mitzenmacher, Michael},
title = {PINT: Probabilistic In-band Network Telemetry},
year = {2020},
isbn = {9781450379557},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3387514.3405894},
doi = {10.1145/3387514.3405894},
abstract = {Commodity network devices support adding in-band telemetry measurements into data packets, enabling a wide range of applications, including network troubleshooting, congestion control, and path tracing. However, including such information on packets adds significant overhead that impacts both flow completion times and application-level performance.We introduce PINT, an in-band network telemetry framework that bounds the amount of information added to each packet. PINT encodes the requested data on multiple packets, allowing per-packet overhead limits that can be as low as one bit. We analyze PINT and prove performance bounds, including cases when multiple queries are running simultaneously. PINT is implemented in P4 and can be deployed on network devices.Using real topologies and traffic characteristics, we show that PINT concurrently enables applications such as congestion control, path tracing, and computing tail latencies, using only sixteen bits per packet, with performance comparable to the state of the art.},
booktitle = {Proceedings of the Annual Conference of the ACM Special Interest Group on Data Communication on the Applications, Technologies, Architectures, and Protocols for Computer Communication},
pages = {662–680},
numpages = {19},
keywords = {Networking Protocols, Networking Algorithms, Network Telemetry},
location = {Virtual Event, USA},
series = {SIGCOMM '20}
}

@inproceedings{SRSDN,
author = {Jyothi, Sangeetha Abdu and Dong, Mo and Godfrey, P. Brighten},
title = {Towards a flexible data center fabric with source routing},
year = {2015},
isbn = {9781450334518},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2774993.2775005},
doi = {10.1145/2774993.2775005},
abstract = {An emerging architecture for software-defined data centers andWANs is the network fabric, where complex application-sensitive functions are factored out, leaving the network itself to provide a simple, robust high-performance data delivery abstraction. This requires performing route optimization, in real time and across a diverse choice of paths. A large variety of techniques have been proposed to provide path diversity for network fabrics. But, running up against the constraint of forwarding table size, these proposals are topology-dependent, complex, and still only provide limited path choice which (we show) can impact performance.We propose a simple approach to realize the vision of a flexible, high-performance fabric: the network should expose every possible path, allowing a controller or edge device maximum choice. To this end, we observe that source routing can be encoded and processed compactly into a single field, even in large networks, with OpenFlow 1.3. We show that, in addition to the expected decrease in required forwarding table size, source routing supports optimal throughput performance, in some cases significantly higher than some past proposals. We thus believe source routing offers a clean abstraction and efficient implementation for future network fabrics.},
booktitle = {Proceedings of the 1st ACM SIGCOMM Symposium on Software Defined Networking Research},
articleno = {10},
numpages = {8},
keywords = {data centers, source routing},
location = {Santa Clara, California},
series = {SOSR '15}
}
@InProceedings{BLAKE2,
author="Aumasson, Jean-Philippe
and Neves, Samuel
and Wilcox-O'Hearn, Zooko
and Winnerlein, Christian",
editor="Jacobson, Michael
and Locasto, Michael
and Mohassel, Payman
and Safavi-Naini, Reihaneh",
title="BLAKE2: Simpler, Smaller, Fast as MD5",
booktitle="Applied Cryptography and Network Security",
year="2013",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="119--135",
abstract="We present the hash function BLAKE2, an improved version of the SHA-3 finalist BLAKE optimized for speed in software. Target applications include cloud storage, intrusion detection, or version control systems. BLAKE2 comes in two main flavors: BLAKE2b is optimized for 64-bit platforms, and BLAKE2s for smaller architectures. On 64-bit platforms, BLAKE2 is often faster than MD5, yet provides security similar to that of SHA-3: up to 256-bit collision resistance, immunity to length extension, indifferentiability from a random oracle, etc. We specify parallel versions BLAKE2bp and BLAKE2sp that are up to 4 and 8 times faster, by taking advantage of SIMD and/or multiple cores. BLAKE2 reduces the RAM requirements of BLAKE down to 168 bytes, making it smaller than any of the five SHA-3 finalists, and 32{\%} smaller than BLAKE. Finally, BLAKE2 provides a comprehensive support for tree-hashing as well as keyed hashing (be it in sequential or tree mode).",
isbn="978-3-642-38980-1"
}

